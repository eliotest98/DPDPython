<FILE> (id,Classes)
<IMPORT_LIST>
<IMPORT> (id,os) </IMPORT>
<IMPORT> (id,copy) </IMPORT>
<FROM> (id,os)
<IMPORT> (id,('close',)) </IMPORT>
</FROM>
<FROM> (id,os)
<IMPORT> (id,('close', 'curdir')) </IMPORT>
</FROM>
<FROM> (id,close)
<IMPORT> (id,close) </IMPORT>
</FROM>
<FROM> (id,Objects.VariableObject)
<IMPORT> (id,('VariableObject',)) </IMPORT>
</FROM>
</IMPORT_LIST>
<VARIABLE_LIST>
<VARIABLE> (id,x)
<TYPE>int</TYPE>
<ARGUMENT> (10) </ARGUMENT>
</VARIABLE>
<VARIABLE> (id,y)
<TYPE>float</TYPE>
<ARGUMENT> (20.5) </ARGUMENT>
</VARIABLE>
<VARIABLE> (id,s)
<TYPE>str</TYPE>
<ARGUMENT> (Ciao, mondo!) </ARGUMENT>
</VARIABLE>
<VARIABLE> (id,lista)
<TYPE>tuple</TYPE>
<ARGUMENT> ((1, 2, 3, 4, 5)) </ARGUMENT>
</VARIABLE>
<VARIABLE> (id,tupla)
<TYPE>tuple</TYPE>
<ARGUMENT> ((1, 2, 3, 4, 5)) </ARGUMENT>
</VARIABLE>
<VARIABLE> (id,dizionario)
<TYPE>dictionary</TYPE>
<ARGUMENT> (chiave:valore) </ARGUMENT>
</VARIABLE>
<VARIABLE> (id,insieme)
<TYPE>frozenset</TYPE>
<ARGUMENT> (frozenset({1, 2, 3, 4, 5})) </ARGUMENT>
</VARIABLE>
<VARIABLE> (id,vero)
<TYPE>bool</TYPE>
<ARGUMENT> (True) </ARGUMENT>
</VARIABLE>
<VARIABLE> (id,falso)
<TYPE>bool</TYPE>
<ARGUMENT> (False) </ARGUMENT>
</VARIABLE>
<VARIABLE> (id,n)
<TYPE>NoneType</TYPE>
<ARGUMENT> (None) </ARGUMENT>
</VARIABLE>
</VARIABLE_LIST>
<CONSTRUCTOR_DECLARATION>
<FUNCTION_DECLARATION> (id,__init__)
<VARIABLE_LIST>
<VARIABLE> (id,x)
<TYPE>int</TYPE>
<ARGUMENT> (10) </ARGUMENT>
</VARIABLE>
</VARIABLE_LIST>
<RETURN><TYPE>NoneType</TYPE>
<ARGUMENT>None</ARGUMENT>
</RETURN>
</FUNCTION_DECLARATION>
</CONSTRUCTOR_DECLARATION>
<FUNCTION_LIST>
<FUNCTION_DECLARATION> (id,__init__)
<VARIABLE_LIST>
<VARIABLE> (id,x)
<TYPE>int</TYPE>
<ARGUMENT> (10) </ARGUMENT>
</VARIABLE>
</VARIABLE_LIST>
<RETURN><TYPE>NoneType</TYPE>
<ARGUMENT>None</ARGUMENT>
</RETURN>
</FUNCTION_DECLARATION>
<FUNCTION_DECLARATION> (id,pippoa)
<VARIABLE_LIST>
<VARIABLE> (id,x)
<TYPE>int</TYPE>
<ARGUMENT> (10) </ARGUMENT>
</VARIABLE>
</VARIABLE_LIST>
<RETURN><TYPE>NoneType</TYPE>
<ARGUMENT>None</ARGUMENT>
</RETURN>
</FUNCTION_DECLARATION>
<FUNCTION_DECLARATION> (id,pluto)
<VARIABLE_LIST>
<VARIABLE> (id,x)
<TYPE>int</TYPE>
<ARGUMENT> (10) </ARGUMENT>
</VARIABLE>
</VARIABLE_LIST>
<RETURN><TYPE>NoneType</TYPE>
<ARGUMENT>None</ARGUMENT>
</RETURN>
</FUNCTION_DECLARATION>
<FUNCTION_DECLARATION> (id,pippo2)
<VARIABLE_LIST>
<VARIABLE> (id,x)
<TYPE>int</TYPE>
<ARGUMENT> (10) </ARGUMENT>
</VARIABLE>
</VARIABLE_LIST>
<RETURN><TYPE>NoneType</TYPE>
<ARGUMENT>None</ARGUMENT>
</RETURN>
</FUNCTION_DECLARATION>
<FUNCTION_DECLARATION> (id,pluto2)
<VARIABLE_LIST>
<VARIABLE> (id,x)
<TYPE>int</TYPE>
<ARGUMENT> (10) </ARGUMENT>
</VARIABLE>
</VARIABLE_LIST>
<RETURN><TYPE>variable</TYPE>
<ARGUMENT><VARIABLE> (id,x)
</VARIABLE></ARGUMENT>
</RETURN>
</FUNCTION_DECLARATION>
<FUNCTION_DECLARATION> (id,paperino)
<RETURN><TYPE>str</TYPE>
<ARGUMENT>quack</ARGUMENT>
</RETURN>
</FUNCTION_DECLARATION>
<FUNCTION_DECLARATION> (id,paperino4)
<INSTRUCTION_LIST>
<VARIABLE> (id,x)
<TYPE>variable</TYPE>
<ARGUMENT> (<VARIABLE> (id,arg)
</VARIABLE>) </ARGUMENT>
</VARIABLE>
</INSTRUCTION_LIST>
<RETURN><TYPE>variable</TYPE>
<ARGUMENT><VARIABLE> (id,x)
</VARIABLE></ARGUMENT>
</RETURN>
</FUNCTION_DECLARATION>
<FUNCTION_DECLARATION> (id,paperino3)
<RETURN><TYPE>int</TYPE>
<ARGUMENT>10</ARGUMENT>
</RETURN>
</FUNCTION_DECLARATION>
<FUNCTION_DECLARATION> (id,paperino2)
<IMPORT_LIST>
<IMPORT> (id,os) </IMPORT>
<IMPORT> (id,copy) </IMPORT>
<FROM> (id,os)
<IMPORT> (id,('close',)) </IMPORT>
</FROM>
<FROM> (id,os)
<IMPORT> (id,('close', 'curdir')) </IMPORT>
</FROM>
<FROM> (id,close)
<IMPORT> (id,close) </IMPORT>
</FROM>
<FROM> (id,Objects.VariableObject)
<IMPORT> (id,('VariableObject',)) </IMPORT>
</FROM>
</IMPORT_LIST>
<VARIABLE_LIST>
<VARIABLE> (id,x)
<TYPE>int</TYPE>
<ARGUMENT> (10) </ARGUMENT>
</VARIABLE>
</VARIABLE_LIST>
<INSTRUCTION_LIST>
<VARIABLE> (id,y)
<TYPE>variable</TYPE>
<ARGUMENT> (<VARIABLE> (id,x)
</VARIABLE>) </ARGUMENT>
</VARIABLE>
<VARIABLE> (id,z)
<TYPE>variable</TYPE>
<ARGUMENT> (<VARIABLE> (id,arg)
</VARIABLE>) </ARGUMENT>
</VARIABLE>
</INSTRUCTION_LIST>
<RETURN><TYPE>str</TYPE>
<ARGUMENT>quack</ARGUMENT>
</RETURN>
</FUNCTION_DECLARATION>
</FUNCTION_LIST>
<CLASS_LIST>
<CLASS> (id,Class)
</CLASS>
<CLASS> (id,Class3)
<IMPORT_LIST>
<IMPORT> (id,os) </IMPORT>
<IMPORT> (id,copy) </IMPORT>
<FROM> (id,os)
<IMPORT> (id,('close',)) </IMPORT>
</FROM>
<FROM> (id,os)
<IMPORT> (id,('close', 'curdir')) </IMPORT>
</FROM>
<FROM> (id,close)
<IMPORT> (id,close) </IMPORT>
</FROM>
<FROM> (id,Objects.VariableObject)
<IMPORT> (id,('VariableObject',)) </IMPORT>
</FROM>
</IMPORT_LIST>
<VARIABLE_LIST>
<VARIABLE> (id,x)
<TYPE>int</TYPE>
<ARGUMENT> (10) </ARGUMENT>
</VARIABLE>
<VARIABLE> (id,y)
<TYPE>float</TYPE>
<ARGUMENT> (20.5) </ARGUMENT>
</VARIABLE>
<VARIABLE> (id,s)
<TYPE>str</TYPE>
<ARGUMENT> (Ciao, mondo!) </ARGUMENT>
</VARIABLE>
<VARIABLE> (id,lista)
<TYPE>tuple</TYPE>
<ARGUMENT> ((1, 2, 3, 4, 5)) </ARGUMENT>
</VARIABLE>
<VARIABLE> (id,tupla)
<TYPE>tuple</TYPE>
<ARGUMENT> ((1, 2, 3, 4, 5)) </ARGUMENT>
</VARIABLE>
<VARIABLE> (id,dizionario)
<TYPE>dictionary</TYPE>
<ARGUMENT> (chiave:valore) </ARGUMENT>
</VARIABLE>
<VARIABLE> (id,insieme)
<TYPE>frozenset</TYPE>
<ARGUMENT> (frozenset({1, 2, 3, 4, 5})) </ARGUMENT>
</VARIABLE>
<VARIABLE> (id,vero)
<TYPE>bool</TYPE>
<ARGUMENT> (True) </ARGUMENT>
</VARIABLE>
<VARIABLE> (id,falso)
<TYPE>bool</TYPE>
<ARGUMENT> (False) </ARGUMENT>
</VARIABLE>
<VARIABLE> (id,n)
<TYPE>NoneType</TYPE>
<ARGUMENT> (None) </ARGUMENT>
</VARIABLE>
</VARIABLE_LIST>
<CONSTRUCTOR_DECLARATION>
<FUNCTION_DECLARATION> (id,__init__)
<VARIABLE_LIST>
<VARIABLE> (id,x)
<TYPE>int</TYPE>
<ARGUMENT> (10) </ARGUMENT>
</VARIABLE>
</VARIABLE_LIST>
<RETURN><TYPE>NoneType</TYPE>
<ARGUMENT>None</ARGUMENT>
</RETURN>
</FUNCTION_DECLARATION>
</CONSTRUCTOR_DECLARATION>
<FUNCTION_LIST>
<FUNCTION_DECLARATION> (id,__init__)
<VARIABLE_LIST>
<VARIABLE> (id,x)
<TYPE>int</TYPE>
<ARGUMENT> (10) </ARGUMENT>
</VARIABLE>
</VARIABLE_LIST>
<RETURN><TYPE>NoneType</TYPE>
<ARGUMENT>None</ARGUMENT>
</RETURN>
</FUNCTION_DECLARATION>
<FUNCTION_DECLARATION> (id,pippo)
<VARIABLE_LIST>
<VARIABLE> (id,x)
<TYPE>int</TYPE>
<ARGUMENT> (10) </ARGUMENT>
</VARIABLE>
</VARIABLE_LIST>
<RETURN><TYPE>NoneType</TYPE>
<ARGUMENT>None</ARGUMENT>
</RETURN>
</FUNCTION_DECLARATION>
<FUNCTION_DECLARATION> (id,pluto)
<VARIABLE_LIST>
<VARIABLE> (id,x)
<TYPE>int</TYPE>
<ARGUMENT> (10) </ARGUMENT>
</VARIABLE>
</VARIABLE_LIST>
<RETURN><TYPE>NoneType</TYPE>
<ARGUMENT>None</ARGUMENT>
</RETURN>
</FUNCTION_DECLARATION>
<FUNCTION_DECLARATION> (id,pippo2)
<VARIABLE_LIST>
<VARIABLE> (id,x)
<TYPE>int</TYPE>
<ARGUMENT> (10) </ARGUMENT>
</VARIABLE>
</VARIABLE_LIST>
<RETURN><TYPE>NoneType</TYPE>
<ARGUMENT>None</ARGUMENT>
</RETURN>
</FUNCTION_DECLARATION>
<FUNCTION_DECLARATION> (id,pluto2)
<VARIABLE_LIST>
<VARIABLE> (id,x)
<TYPE>int</TYPE>
<ARGUMENT> (10) </ARGUMENT>
</VARIABLE>
</VARIABLE_LIST>
<RETURN><TYPE>variable</TYPE>
<ARGUMENT><VARIABLE> (id,x)
</VARIABLE></ARGUMENT>
</RETURN>
</FUNCTION_DECLARATION>
<FUNCTION_DECLARATION> (id,paperino)
<RETURN><TYPE>str</TYPE>
<ARGUMENT>quack</ARGUMENT>
</RETURN>
</FUNCTION_DECLARATION>
<FUNCTION_DECLARATION> (id,paperino4)
<INSTRUCTION_LIST>
<VARIABLE> (id,x)
<TYPE>variable</TYPE>
<ARGUMENT> (<VARIABLE> (id,arg)
</VARIABLE>) </ARGUMENT>
</VARIABLE>
</INSTRUCTION_LIST>
<RETURN><TYPE>variable</TYPE>
<ARGUMENT><VARIABLE> (id,x)
</VARIABLE></ARGUMENT>
</RETURN>
</FUNCTION_DECLARATION>
<FUNCTION_DECLARATION> (id,paperino3)
<RETURN><TYPE>int</TYPE>
<ARGUMENT>10</ARGUMENT>
</RETURN>
</FUNCTION_DECLARATION>
<FUNCTION_DECLARATION> (id,paperino2)
<IMPORT_LIST>
<IMPORT> (id,os) </IMPORT>
<IMPORT> (id,copy) </IMPORT>
<FROM> (id,os)
<IMPORT> (id,('close',)) </IMPORT>
</FROM>
<FROM> (id,os)
<IMPORT> (id,('close', 'curdir')) </IMPORT>
</FROM>
<FROM> (id,close)
<IMPORT> (id,close) </IMPORT>
</FROM>
<FROM> (id,Objects.VariableObject)
<IMPORT> (id,('VariableObject',)) </IMPORT>
</FROM>
</IMPORT_LIST>
<VARIABLE_LIST>
<VARIABLE> (id,x)
<TYPE>int</TYPE>
<ARGUMENT> (10) </ARGUMENT>
</VARIABLE>
<VARIABLE> (id,y)
<TYPE>float</TYPE>
<ARGUMENT> (20.5) </ARGUMENT>
</VARIABLE>
<VARIABLE> (id,s)
<TYPE>str</TYPE>
<ARGUMENT> (Ciao, mondo!) </ARGUMENT>
</VARIABLE>
<VARIABLE> (id,lista)
<TYPE>tuple</TYPE>
<ARGUMENT> ((1, 2, 3, 4, 5)) </ARGUMENT>
</VARIABLE>
<VARIABLE> (id,tupla)
<TYPE>tuple</TYPE>
<ARGUMENT> ((1, 2, 3, 4, 5)) </ARGUMENT>
</VARIABLE>
<VARIABLE> (id,dizionario)
<TYPE>dictionary</TYPE>
<ARGUMENT> (chiave:valore) </ARGUMENT>
</VARIABLE>
<VARIABLE> (id,insieme)
<TYPE>frozenset</TYPE>
<ARGUMENT> (frozenset({1, 2, 3, 4, 5})) </ARGUMENT>
</VARIABLE>
<VARIABLE> (id,vero)
<TYPE>bool</TYPE>
<ARGUMENT> (True) </ARGUMENT>
</VARIABLE>
<VARIABLE> (id,falso)
<TYPE>bool</TYPE>
<ARGUMENT> (False) </ARGUMENT>
</VARIABLE>
<VARIABLE> (id,n)
<TYPE>NoneType</TYPE>
<ARGUMENT> (None) </ARGUMENT>
</VARIABLE>
<VARIABLE> (id,self.x)
<TYPE>int</TYPE>
<ARGUMENT> (10) </ARGUMENT>
</VARIABLE>
<VARIABLE> (id,self.y)
<TYPE>float</TYPE>
<ARGUMENT> (20.5) </ARGUMENT>
</VARIABLE>
<VARIABLE> (id,self.s)
<TYPE>str</TYPE>
<ARGUMENT> (Ciao, mondo!) </ARGUMENT>
</VARIABLE>
<VARIABLE> (id,self.lista)
<TYPE>tuple</TYPE>
<ARGUMENT> ((1, 2, 3, 4, 5)) </ARGUMENT>
</VARIABLE>
<VARIABLE> (id,self.tupla)
<TYPE>tuple</TYPE>
<ARGUMENT> ((1, 2, 3, 4, 5)) </ARGUMENT>
</VARIABLE>
<VARIABLE> (id,self.dizionario)
<TYPE>dictionary</TYPE>
<ARGUMENT> (chiave:valore) </ARGUMENT>
</VARIABLE>
<VARIABLE> (id,self.insieme)
<TYPE>frozenset</TYPE>
<ARGUMENT> (frozenset({1, 2, 3, 4, 5})) </ARGUMENT>
</VARIABLE>
<VARIABLE> (id,self.vero)
<TYPE>bool</TYPE>
<ARGUMENT> (True) </ARGUMENT>
</VARIABLE>
<VARIABLE> (id,self.falso)
<TYPE>bool</TYPE>
<ARGUMENT> (False) </ARGUMENT>
</VARIABLE>
<VARIABLE> (id,self.n)
<TYPE>NoneType</TYPE>
<ARGUMENT> (None) </ARGUMENT>
</VARIABLE>
</VARIABLE_LIST>
<INSTRUCTION_LIST>
<CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION>
<VARIABLE> (id,pippo_)
<TYPE>CallMethod</TYPE>
<ARGUMENT> (<CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION>) </ARGUMENT>
</VARIABLE>
<VARIABLE> (id,pippo)
<TYPE>CallFunction</TYPE>
<ARGUMENT> (<CALL_FUNCTION> (id,
list()</CALL_FUNCTION>) </ARGUMENT>
</VARIABLE>
<CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION>
<VARIABLE> (id,self.pippo_)
<TYPE>CallMethod</TYPE>
<ARGUMENT> (<CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION>) </ARGUMENT>
</VARIABLE>
<VARIABLE> (id,self.pippo)
<TYPE>CallFunction</TYPE>
<ARGUMENT> (<CALL_FUNCTION> (id,
list()</CALL_FUNCTION>) </ARGUMENT>
</VARIABLE>
<CALL_FUNCTION> (id,
print(str:x)</CALL_FUNCTION>
<CALL_FUNCTION> (id,
print(str:x,str:y)</CALL_FUNCTION>
<CALL_FUNCTION> (id,
print(str:x,str:y,str:z)</CALL_FUNCTION>
<CALL_FUNCTION> (id,
print(x)</CALL_FUNCTION>
<CALL_FUNCTION> (id,
print(x,y,s)</CALL_FUNCTION>
<CALL_FUNCTION> (id,
print(<CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION>)</CALL_FUNCTION>
<CALL_FUNCTION> (id,
print(<CONCATENATE_FUNCTION><CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION><CALL_FUNCTION> (id,
.split(str:)</CALL_FUNCTION></CONCATENATE_FUNCTION>)</CALL_FUNCTION>
<CALL_FUNCTION> (id,
print(<CONCATENATE_FUNCTION><CONCATENATE_FUNCTION><CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION><CALL_FUNCTION> (id,
.split(str:x)</CALL_FUNCTION></CONCATENATE_FUNCTION><CALL_FUNCTION> (id,
.append(str:x)</CALL_FUNCTION></CONCATENATE_FUNCTION>)</CALL_FUNCTION>
<CALL_FUNCTION> (id,
print(<CALL_FUNCTION> (id,
os.path.split(str:x)</CALL_FUNCTION>)</CALL_FUNCTION>
<CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION>
<CALL_FUNCTION> (id,
print(<CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION>,<CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION>)</CALL_FUNCTION>
<CONCATENATE_FUNCTION><CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION><CALL_FUNCTION> (id,
.split(str:x)</CALL_FUNCTION></CONCATENATE_FUNCTION>
<CALL_FUNCTION> (id,
print(<CONCATENATE_FUNCTION><CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION><CALL_FUNCTION> (id,
.split(str:x)</CALL_FUNCTION></CONCATENATE_FUNCTION>,<CONCATENATE_FUNCTION><CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION><CALL_FUNCTION> (id,
.split(str:x)</CALL_FUNCTION></CONCATENATE_FUNCTION>)</CALL_FUNCTION>
<CALL_FUNCTION> (id,
print(x)</CALL_FUNCTION>
<CALL_FUNCTION> (id,
print(x,str:y)</CALL_FUNCTION>
<CALL_FUNCTION> (id,
print(x,<CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION>)</CALL_FUNCTION>
<CALL_FUNCTION> (id,
print(x,<CONCATENATE_FUNCTION><CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION><CALL_FUNCTION> (id,
.split(str:x)</CALL_FUNCTION></CONCATENATE_FUNCTION>)</CALL_FUNCTION>
<CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION>
<CONCATENATE_FUNCTION><CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION><CALL_FUNCTION> (id,
.split(str:x)</CALL_FUNCTION></CONCATENATE_FUNCTION>
<CONCATENATE_FUNCTION><CONCATENATE_FUNCTION><CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION><CALL_FUNCTION> (id,
.split(str:x)</CALL_FUNCTION></CONCATENATE_FUNCTION><CALL_FUNCTION> (id,
.append(str:x)</CALL_FUNCTION></CONCATENATE_FUNCTION>
<CONCATENATE_FUNCTION><CALL_FUNCTION> (id,
os.path.split(str:x)</CALL_FUNCTION><CALL_FUNCTION> (id,
.count(str:x)</CALL_FUNCTION></CONCATENATE_FUNCTION>
<CONCATENATE_FUNCTION><CALL_FUNCTION> (id,
Class3()</CALL_FUNCTION><CALL_FUNCTION> (id,
.paperino(str:Quack,str:Quack)</CALL_FUNCTION></CONCATENATE_FUNCTION>
<CALL_FUNCTION> (id,
Class3.paperino(str:Quack,str:Quack)</CALL_FUNCTION>
<CALL_FUNCTION> (id,
Class3.pluto(str:Woof)</CALL_FUNCTION>
<CONCATENATE_FUNCTION><CALL_FUNCTION> (id,
Class3()</CALL_FUNCTION><CALL_FUNCTION> (id,
.pluto(str:Woof)</CALL_FUNCTION></CONCATENATE_FUNCTION>
<CALL_FUNCTION> (id,
Class3.pluto(<CALL_FUNCTION> (id,
Class3.paperino(str:Quack,str:Quack)</CALL_FUNCTION>)</CALL_FUNCTION>
<CONCATENATE_FUNCTION><CALL_FUNCTION> (id,
Class3()</CALL_FUNCTION><CALL_FUNCTION> (id,
.pluto(<CALL_FUNCTION> (id,
Class3.paperino(str:Quack,str:Quack)</CALL_FUNCTION>)</CALL_FUNCTION></CONCATENATE_FUNCTION>
</INSTRUCTION_LIST>
<RETURN><TYPE>str</TYPE>
<ARGUMENT>quack</ARGUMENT>
</RETURN>
</FUNCTION_DECLARATION>
</FUNCTION_LIST>
<INSTRUCTION_LIST>
<VARIABLE> (id,ciccio)
<TYPE>variable</TYPE>
<ARGUMENT> (<VARIABLE> (id,vero)
</VARIABLE>) </ARGUMENT>
</VARIABLE>
<VARIABLE> (id,pippo_)
<TYPE>CallMethod</TYPE>
<ARGUMENT> (<CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION>) </ARGUMENT>
</VARIABLE>
<VARIABLE> (id,list_)
<TYPE>CallFunction</TYPE>
<ARGUMENT> (<CALL_FUNCTION> (id,
list()</CALL_FUNCTION>) </ARGUMENT>
</VARIABLE>
<CALL_FUNCTION> (id,
print(str:x)</CALL_FUNCTION>
<CALL_FUNCTION> (id,
print(str:x,str:y)</CALL_FUNCTION>
<CALL_FUNCTION> (id,
print(str:x,str:y,str:z)</CALL_FUNCTION>
<CALL_FUNCTION> (id,
print(x)</CALL_FUNCTION>
<CALL_FUNCTION> (id,
print(x,y,s)</CALL_FUNCTION>
<CALL_FUNCTION> (id,
print(<CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION>)</CALL_FUNCTION>
<CALL_FUNCTION> (id,
print(<CONCATENATE_FUNCTION><CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION><CALL_FUNCTION> (id,
.split(str:)</CALL_FUNCTION></CONCATENATE_FUNCTION>)</CALL_FUNCTION>
<CALL_FUNCTION> (id,
print(<CONCATENATE_FUNCTION><CONCATENATE_FUNCTION><CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION><CALL_FUNCTION> (id,
.split(str:x)</CALL_FUNCTION></CONCATENATE_FUNCTION><CALL_FUNCTION> (id,
.append(str:x)</CALL_FUNCTION></CONCATENATE_FUNCTION>)</CALL_FUNCTION>
<CALL_FUNCTION> (id,
print(<CALL_FUNCTION> (id,
os.path.split(str:x)</CALL_FUNCTION>)</CALL_FUNCTION>
<CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION>
<CALL_FUNCTION> (id,
print(<CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION>,<CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION>)</CALL_FUNCTION>
<CONCATENATE_FUNCTION><CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION><CALL_FUNCTION> (id,
.split(str:x)</CALL_FUNCTION></CONCATENATE_FUNCTION>
<CALL_FUNCTION> (id,
print(<CONCATENATE_FUNCTION><CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION><CALL_FUNCTION> (id,
.split(str:x)</CALL_FUNCTION></CONCATENATE_FUNCTION>,<CONCATENATE_FUNCTION><CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION><CALL_FUNCTION> (id,
.split(str:x)</CALL_FUNCTION></CONCATENATE_FUNCTION>)</CALL_FUNCTION>
<CALL_FUNCTION> (id,
print(x)</CALL_FUNCTION>
<CALL_FUNCTION> (id,
print(x,str:y)</CALL_FUNCTION>
<CALL_FUNCTION> (id,
print(x,<CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION>)</CALL_FUNCTION>
<CALL_FUNCTION> (id,
print(x,<CONCATENATE_FUNCTION><CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION><CALL_FUNCTION> (id,
.split(str:x)</CALL_FUNCTION></CONCATENATE_FUNCTION>)</CALL_FUNCTION>
<CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION>
<CONCATENATE_FUNCTION><CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION><CALL_FUNCTION> (id,
.split(str:x)</CALL_FUNCTION></CONCATENATE_FUNCTION>
<CONCATENATE_FUNCTION><CONCATENATE_FUNCTION><CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION><CALL_FUNCTION> (id,
.split(str:x)</CALL_FUNCTION></CONCATENATE_FUNCTION><CALL_FUNCTION> (id,
.append(str:x)</CALL_FUNCTION></CONCATENATE_FUNCTION>
<CONCATENATE_FUNCTION><CALL_FUNCTION> (id,
os.path.split(str:x)</CALL_FUNCTION><CALL_FUNCTION> (id,
.count(str:x)</CALL_FUNCTION></CONCATENATE_FUNCTION>
</INSTRUCTION_LIST>
</CLASS>
<CLASS> (id,Class2)
<INSTRUCTION_LIST>
<CONCATENATE_FUNCTION><CALL_FUNCTION> (id,
Class3()</CALL_FUNCTION><CALL_FUNCTION> (id,
.paperino(str:Quack,str:Quack)</CALL_FUNCTION></CONCATENATE_FUNCTION>
<CALL_FUNCTION> (id,
Class3.paperino(str:Quack,str:Quack)</CALL_FUNCTION>
<CALL_FUNCTION> (id,
Class3.pluto(str:Woof)</CALL_FUNCTION>
<CONCATENATE_FUNCTION><CALL_FUNCTION> (id,
Class3()</CALL_FUNCTION><CALL_FUNCTION> (id,
.pluto(str:Woof)</CALL_FUNCTION></CONCATENATE_FUNCTION>
<CALL_FUNCTION> (id,
Class3.pluto(<CALL_FUNCTION> (id,
Class3.paperino(str:Quack,str:Quack)</CALL_FUNCTION>)</CALL_FUNCTION>
<CONCATENATE_FUNCTION><CALL_FUNCTION> (id,
Class3()</CALL_FUNCTION><CALL_FUNCTION> (id,
.pluto(<CALL_FUNCTION> (id,
Class3.paperino(str:Quack,str:Quack)</CALL_FUNCTION>)</CALL_FUNCTION></CONCATENATE_FUNCTION>
</INSTRUCTION_LIST>
</CLASS>
</CLASS_LIST>
<INSTRUCTION_LIST>
<VARIABLE> (id,ciccio)
<ARGUMENT> (vero) </ARGUMENT>
</VARIABLE>
<VARIABLE> (id,pippo)
<TYPE>CallMethod</TYPE>
<ARGUMENT> (<CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION>) </ARGUMENT>
</VARIABLE>
<VARIABLE> (id,list_)
<TYPE>CallFunction</TYPE>
<ARGUMENT> (<CALL_FUNCTION> (id,
list()</CALL_FUNCTION>) </ARGUMENT>
</VARIABLE>
<CALL_FUNCTION> (id,
print(str:x)</CALL_FUNCTION>
<CALL_FUNCTION> (id,
print(str:x,str:y)</CALL_FUNCTION>
<CALL_FUNCTION> (id,
print(str:x,str:y,str:z)</CALL_FUNCTION>
<CALL_FUNCTION> (id,
print(x)</CALL_FUNCTION>
<CALL_FUNCTION> (id,
print(x,y,s)</CALL_FUNCTION>
<CALL_FUNCTION> (id,
print(<CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION>)</CALL_FUNCTION>
<CALL_FUNCTION> (id,
print(<CONCATENATE_FUNCTION><CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION><CALL_FUNCTION> (id,
.split(str:)</CALL_FUNCTION></CONCATENATE_FUNCTION>)</CALL_FUNCTION>
<CALL_FUNCTION> (id,
print(<CONCATENATE_FUNCTION><CONCATENATE_FUNCTION><CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION><CALL_FUNCTION> (id,
.split(str:x)</CALL_FUNCTION></CONCATENATE_FUNCTION><CALL_FUNCTION> (id,
.append(str:x)</CALL_FUNCTION></CONCATENATE_FUNCTION>)</CALL_FUNCTION>
<CALL_FUNCTION> (id,
print(<CALL_FUNCTION> (id,
os.path.split(str:x)</CALL_FUNCTION>)</CALL_FUNCTION>
<CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION>
<CALL_FUNCTION> (id,
print(<CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION>,<CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION>)</CALL_FUNCTION>
<CONCATENATE_FUNCTION><CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION><CALL_FUNCTION> (id,
.split(str:x)</CALL_FUNCTION></CONCATENATE_FUNCTION>
<CALL_FUNCTION> (id,
print(<CONCATENATE_FUNCTION><CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION><CALL_FUNCTION> (id,
.split(str:x)</CALL_FUNCTION></CONCATENATE_FUNCTION>,<CONCATENATE_FUNCTION><CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION><CALL_FUNCTION> (id,
.split(str:x)</CALL_FUNCTION></CONCATENATE_FUNCTION>)</CALL_FUNCTION>
<CALL_FUNCTION> (id,
print(x)</CALL_FUNCTION>
<CALL_FUNCTION> (id,
print(x,str:y)</CALL_FUNCTION>
<CALL_FUNCTION> (id,
print(x,<CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION>)</CALL_FUNCTION>
<CALL_FUNCTION> (id,
print(x,<CONCATENATE_FUNCTION><CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION><CALL_FUNCTION> (id,
.split(str:x)</CALL_FUNCTION></CONCATENATE_FUNCTION>)</CALL_FUNCTION>
<CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION>
<CONCATENATE_FUNCTION><CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION><CALL_FUNCTION> (id,
.split(str:x)</CALL_FUNCTION></CONCATENATE_FUNCTION>
<CONCATENATE_FUNCTION><CONCATENATE_FUNCTION><CALL_FUNCTION> (id,
os.getcwd()</CALL_FUNCTION><CALL_FUNCTION> (id,
.split(str:x)</CALL_FUNCTION></CONCATENATE_FUNCTION><CALL_FUNCTION> (id,
.append(str:x)</CALL_FUNCTION></CONCATENATE_FUNCTION>
<CONCATENATE_FUNCTION><CALL_FUNCTION> (id,
os.path.split(str:x)</CALL_FUNCTION><CALL_FUNCTION> (id,
.count(str:x)</CALL_FUNCTION></CONCATENATE_FUNCTION>
<CONCATENATE_FUNCTION><CALL_FUNCTION> (id,
Class3()</CALL_FUNCTION><CALL_FUNCTION> (id,
.paperino(str:Quack,str:Quack)</CALL_FUNCTION></CONCATENATE_FUNCTION>
<CALL_FUNCTION> (id,
Class3.paperino(str:Quack,str:Quack)</CALL_FUNCTION>
<CALL_FUNCTION> (id,
Class3.pluto(str:Woof)</CALL_FUNCTION>
<CONCATENATE_FUNCTION><CALL_FUNCTION> (id,
Class3()</CALL_FUNCTION><CALL_FUNCTION> (id,
.pluto(str:Woof)</CALL_FUNCTION></CONCATENATE_FUNCTION>
<CALL_FUNCTION> (id,
Class3.pluto(<CALL_FUNCTION> (id,
Class3.paperino(str:Quack,str:Quack)</CALL_FUNCTION>)</CALL_FUNCTION>
<CONCATENATE_FUNCTION><CALL_FUNCTION> (id,
Class3()</CALL_FUNCTION><CALL_FUNCTION> (id,
.pluto(<CALL_FUNCTION> (id,
Class3.paperino(str:Quack,str:Quack)</CALL_FUNCTION>)</CALL_FUNCTION></CONCATENATE_FUNCTION>
</INSTRUCTION_LIST>
</FILE>
